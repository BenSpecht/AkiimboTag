package main;

import java.util.Iterator;
import java.util.List;

import main.gui.GUIOptions;
import main.commands.TagCommand;
import main.config.ConfigWrapper;
import main.gui.GUIHandler;
import main.gui.TagGUI;
import main.listeners.ChatFormatListener;
import main.listeners.ChatListener;
import main.listeners.JoinListener;
import main.listeners.PlayerListener;
import main.updater.UpdateChecker;
//import me.clip.placeholderapi.PlaceholderAPI;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitTask;

public class DeluxeTags extends JavaPlugin {
    private TagConfig cfg;
    private ConfigWrapper messages;
    private ConfigWrapper playerFile;
    private GUIHandler guiHandler;
    private GUIOptions guiOptions;
    private DeluxeTag dummy;
    private BukkitTask cleanupTask = null;
    private UpdateChecker updater = null;
    private static boolean deluxeMode;
    private static boolean forceTags;
    private static boolean papi;

    public DeluxeTags() {
    }

    public void onEnable() {
        this.dummy = new DeluxeTag(420691337, "", "", "");
        this.cfg = new TagConfig(this);
        this.getCfg().loadDefConfig();
        deluxeMode = this.cfg.deluxeChat();
        forceTags = this.getCfg().forceTags();
        this.getLogger().info(this.getCfg().loadTags() + " tags loaded");
        this.playerFile = new ConfigWrapper(this, "userdata", "player_tags.yml");
        this.playerFile.createNewFile((String)null, "DeluxeTags player_tags.yml\nDo not edit this file!");
        this.cleanupTask = Bukkit.getScheduler().runTaskTimerAsynchronously(this, new CleanupTask(this), 6000L, 6000L);
        this.guiOptions = new GUIOptions(this);
        this.guiHandler = new GUIHandler(this);
        Bukkit.getPluginManager().registerEvents(this.guiHandler, this);
        this.getCommand("tags").setExecutor(new TagCommand(this));
        Bukkit.getPluginManager().registerEvents(new PlayerListener(this), this);
        if (this.cfg.loadTagOnJoin()) {
            Bukkit.getPluginManager().registerEvents(new JoinListener(this), this);
        }

        this.messages = new ConfigWrapper(this, (String)null, "messages.yml");
        this.messages.createNewFile("Loading DeluxeTags messages.yml", "DeluxeTags messages.yml\nEdit the plugin messages to your liking!");
        this.loadMessages();
        papi = Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null;
        if (deluxeMode) {
            this.getLogger().info("DeluxeChat will handle fetching placeholders for tags!");
        } else {
            if (this.cfg.formatChat()) {
                Bukkit.getPluginManager().registerEvents(new ChatFormatListener(this), this);
            }

            Bukkit.getPluginManager().registerEvents(new ChatListener(this), this);
            this.getLogger().info("You are not using DeluxeChat!");
            this.getLogger().info("DeluxeTags will listen to the AsyncPlayerChatEvent to provide compatibility for some chat plugins.");
        }

        if (this.getCfg().checkUpdates()) {
            this.updater = new UpdateChecker(this);
            this.updater.fetch();
            if (this.updater.hasUpdateAvailable()) {
                System.out.println("----------------------------");
                System.out.println("     DeluxeTags Updater");
                System.out.println(" ");
                System.out.println("An update for DeluxeChat has been found!");
                System.out.println("DeluxeTags " + this.updater.getSpigotVersion());
                System.out.println("You are running " + this.getDescription().getVersion());
                System.out.println(" ");
                System.out.println("Download at http://www.spigotmc.org/resources/deluxetags.4390/");
                System.out.println("----------------------------");
            } else {
                System.out.println("----------------------------");
                System.out.println("     DeluxeTags Updater");
                System.out.println(" ");
                System.out.println("You are running " + this.getDescription().getVersion());
                System.out.println("The latest version");
                System.out.println("of DeluxeTags!");
                System.out.println(" ");
                System.out.println("----------------------------");
            }
        }

    }

    public void onDisable() {
        if (this.cleanupTask != null) {
            this.cleanupTask.cancel();
            this.cleanupTask = null;
        }

        DeluxeTag.unloadData();
        TagGUI.unload();
        this.guiOptions = null;
        this.dummy = null;
    }

    public DeluxeTag getDummy() {
        return this.dummy;
    }

    public TagConfig getCfg() {
        return this.cfg;
    }

    public GUIHandler getGUIHandler() {
        return this.guiHandler;
    }

    public UpdateChecker getUpdateChecker() {
        return this.updater;
    }

    public String getSavedTagIdentifier(String uuid) {
        FileConfiguration c = this.playerFile.getConfig();
        return c.contains(uuid) && c.isString(uuid) && c.getString(uuid) != null ? c.getString(uuid) : null;
    }

    public void saveTagIdentifier(String uuid, String tagIdentifier) {
        FileConfiguration c = this.playerFile.getConfig();
        c.set(uuid, tagIdentifier);
        this.playerFile.saveConfig();
    }

    public void removeSavedTag(String uuid) {
        FileConfiguration c = this.playerFile.getConfig();
        if (c.contains(uuid)) {
            c.set(uuid, (Object)null);
            this.playerFile.saveConfig();
        }

    }

    public boolean removeSavedTags(List<String> uuids) {
        boolean s = false;
        FileConfiguration c = this.playerFile.getConfig();
        if (uuids != null && !uuids.isEmpty()) {
            Iterator var4 = uuids.iterator();

            while(var4.hasNext()) {
                String uuid = (String)var4.next();
                if (c.contains(uuid)) {
                    c.set(uuid, (Object)null);
                    s = true;
                }
            }

            if (s) {
                this.playerFile.saveConfig();
            }
        }

        return s;
    }

    public ConfigWrapper getPlayerFile() {
        return this.playerFile;
    }

    public ConfigWrapper getLangFile() {
        return this.messages;
    }

    public void loadMessages() {
        Lang.setFile(this.messages.getConfig());
        Lang[] var1 = Lang.values();
        int var2 = var1.length;

        for(int var3 = 0; var3 < var2; ++var3) {
            Lang value = var1[var3];
            this.messages.getConfig().addDefault(value.getPath(), value.getDefault());
        }

        this.messages.getConfig().options().copyDefaults(true);
        this.messages.saveConfig();
    }

    public boolean isDeluxeMode() {
        return deluxeMode;
    }

    public GUIOptions getGuiOptions() {
        if (this.guiOptions == null) {
            this.guiOptions = new GUIOptions(this);
        }

        return this.guiOptions;
    }

    public void reloadGUIOptions() {
        this.guiOptions = new GUIOptions(this);
    }

    public static boolean forceTags() {
        return forceTags;
    }

    public static void setForceTags(boolean b) {
        forceTags = b;
    }

    public static String setPlaceholders(Player p, String s, DeluxeTag tag) {
        if (tag == null) {
            tag = DeluxeTag.getTag(p.getUniqueId().toString());
        }

        if (tag == null) {
            tag = new DeluxeTag(1, "", "", "");
        }

        String description;
        String amt;
        List tmp;
        if (deluxeMode) {
            if (s.contains("%player%")) {
                s = s.replace("%player%", p.getName());
            }

            if (s.contains("%displayname%")) {
                s = s.replace("%displayname%", p.getDisplayName());
            }

            if (s.contains("%deluxetags_tag%")) {
                s = s.replace("%deluxetags_tag%", tag.getDisplayTag());
            }

            if (s.contains("%deluxetags_identifier%")) {
                description = tag.getIdentifier();
                if (description == null) {
                    description = "";
                }

                s = s.replace("%deluxetags_identifier%", description);
            }

            if (s.contains("%deluxetags_description%")) {
                description = tag.getDescription();
                s = s.replace("%deluxetags_description%", description);
            }

            if (s.contains("%deluxetags_amount%")) {
                tmp = DeluxeTag.getAvailableTagIdentifiers(p);
                amt = "0";
                if (tmp != null) {
                    amt = String.valueOf(tmp.size());
                }

                s = s.replace("%deluxetags_amount%", amt);
            }
        } else {
            if (s.contains("{player}")) {
                s = s.replace("{player}", p.getName());
            }

            if (s.contains("{displayname}")) {
                s = s.replace("{displayname}", p.getDisplayName());
            }

            if (s.contains("{deluxetags_tag}")) {
                s = s.replace("{deluxetags_tag}", tag.getDisplayTag());
            }

            if (s.contains("{deluxetags_identifier}")) {
                description = tag.getIdentifier();
                if (description == null) {
                    description = "";
                }

                s = s.replace("{deluxetags_identifier}", description);
            }

            if (s.contains("{deluxetags_description}")) {
                description = tag.getDescription();
                s = s.replace("{deluxetags_description}", description);
            }

            if (s.contains("{deluxetags_amount}")) {
                tmp = DeluxeTag.getAvailableTagIdentifiers(p);
                amt = "0";
                if (tmp != null) {
                    amt = String.valueOf(tmp.size());
                }

                s = s.replace("{deluxetags_amount}", amt);
            }
        }

//        if (papi) {
//            s = PlaceholderAPI.setPlaceholders(p, s);
//        }

        return ChatColor.translateAlternateColorCodes('&', s);
    }

    public static boolean papi() {
        return papi;
    }
}
